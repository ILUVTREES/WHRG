if not game:IsLoaded() then game.Loaded:Wait() end

local Prediction = 0.0461

local UIS = game:GetService("UserInputService")
getgenv().EnabledLock = false
getgenv().Final = nil
getgenv().Resolver = false
getgenv().CMMain =
	UIS.InputBegan:Connect(function(input, chatting)
		if chatting then return end
		getgenv().CMActi = "C"
		if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode[string.upper(getgenv().CMActi)] then
			if not Lock then
				Lock = true
				GetNearestTarget = function()
					-- Credits to whoever made this script. My own function works, but is not accurate
					local players = {}
					local PLAYER_HOLD  = {}
					local DISTANCES = {}
					for i, v in pairs(game:GetService("Players"):GetPlayers()) do
						if v ~= game:GetService("Players").LocalPlayer then
							table.insert(players, v)
						end
					end
					for i, v in pairs(players) do
						if v.Character ~= nil then
							local AIM = v.Character:FindFirstChild("Head")
							if v.Character:findFirstChildOfClass("Humanoid").Health <= 0 then
								return nil
							end
							local DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
							local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (game:GetService("Players").LocalPlayer:GetMouse().Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
							local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
							local DIFF = math.floor((POS - AIM.Position).magnitude)
							PLAYER_HOLD[v.Name .. i] = {}
							PLAYER_HOLD[v.Name .. i].dist= DISTANCE
							PLAYER_HOLD[v.Name .. i].plr = v
							PLAYER_HOLD[v.Name .. i].diff = DIFF
							table.insert(DISTANCES, DIFF)
						end
					end

					if unpack(DISTANCES) == nil then
						return nil
					end

					local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
					if L_DISTANCE > 30 then
						return nil
					end


					for i, v in pairs(PLAYER_HOLD) do
						if v.diff == L_DISTANCE then
							return v.plr
						end
					end
					return nil
				end

				pcall(function()
					CaughtPlayer = GetNearestTarget().Character or GetNearestTarget().CharacterAdded:Wait()
				end)
				EJGHNERJG =
					game:GetService("RunService").RenderStepped:Connect(function()
						for i, v in next, CaughtPlayer:GetChildren() do
						if v:IsA("MeshPart") or v:IsA("Part") then
							local Velocity = v.Velocity
							v.Velocity = Vector3.new(Velocity.X, 0, Velocity.Z)
							local Linear = v.AssemblyLinearVelocity
							v.AssemblyLinearVelocity = Vector3.new(Linear.X, 0, Linear.Z)
						end
					end
					end)

				DFGKODFG2 =
					game:GetService("RunService").RenderStepped:Connect(function()
						local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
						local Value = tostring(ping)
						local pingValue = Value:split(" ")
						local PingNumber = pingValue[1]
						local PingPred = PingNumber / 1000
						local Distance = game:GetService("Players").LocalPlayer:DistanceFromCharacter(CaughtPlayer.UpperTorso.Position) /  1000
						local Size = CaughtPlayer.UpperTorso.Size.X + CaughtPlayer.UpperTorso.Size.Y + CaughtPlayer.UpperTorso.Size.Z
						MainPred = PingPred + Distance + Size / 10000000 + Prediction
						if getgenv().Resolver == true then
						getgenv().Final = CaughtPlayer.UpperTorso.CFrame + CaughtPlayer.Humanoid.MoveDirection / MainPred
					else
						getgenv().Final = CaughtPlayer.UpperTorso.CFrame + CaughtPlayer.UpperTorso.Velocity * MainPred
					end
					end)
				getgenv().EnabledLockd = true
			else
				Lock = false
				if DFGKODFG2 then DFGKODFG2:Disconnect() end
				if EJGHNERJG then EJGHNERJG:Disconnect() end
				getgenv().EnabledLockd = false
			end
		end
	end
	end)


Rage =
	UIS.InputBegan:Connect(function(input)
		if (input.KeyCode == Enum.KeyCode.LeftAlt and UIS:IsKeyDown(Enum.KeyCode.Z)) or (input.KeyCode == Enum.KeyCode.Z and UIS:IsKeyDown(Enum.KeyCode.LeftAlt)) then
		if not Rage then
			Rage = true
			game:GetService("Workspace").Camera.CameraSubject = CaughtPlayer.Humanoid
			local Tool = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool").Name
			game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool").GripPos = Vector3.new(0, -22, -1) wait()
			game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool").Parent = game:GetService("Players").LocalPlayer.Backpack wait()
			game:GetService("Players").LocalPlayer.Backpack[Tool].Parent = game:GetService("Players").LocalPlayer.Character
			LastPosition = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position
			wait()
			thing =
				game:GetService("RunService").Heartbeat:Connect(function()
					game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CaughtPlayer.HumanoidRootPart.CFrame * CFrame.new(0, -7, 0)
				end)
		else
			Rage = false
			game:GetService("Workspace").Camera.CameraSubject = game:GetService("Players").LocalPlayer.Character.Humanoid
			thing:Disconnect()
			local Tool = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool").Name
			game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool").GripPos = Vector3.new(0, .03, 0)
			game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool").Parent = game:GetService("Players").LocalPlayer.Backpack
			game:GetService("Players").LocalPlayer.Backpack[Tool].Parent = game:GetService("Players").LocalPlayer.Character
			game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LastPosition)
		end
	end
	end)

UniversalResolver =
	UIS.InputBegan:Connect(function(input)
		if (input.KeyCode == Enum.KeyCode.LeftAlt and UIS:IsKeyDown(Enum.KeyCode.V)) or (input.KeyCode == Enum.KeyCode.V and UIS:IsKeyDown(Enum.KeyCode.LeftAlt)) then
		if not resolver then
			resolver = true
			getgenv().Resolver = true
			text = Drawing.new("Text")
			text.Text = "Resolved has been turned on"
			text.Color = Color3.new(1, 1, 1) -- white text
			text.OutlineColor = Color3.new(0, 0, 0) -- black outline
			text.Center = true -- center text
			text.Outline = true
			text.Position = Vector2.new(100, 100)
			text.Size = 15 -- font size
			text.Font = Drawing.Fonts.Monospace -- 'UI', 'System', 'Plex', 'Monospace'
			text.Transparency = 0.9
			wait(5)
			text:Remove()
		else
			resolver = false
			getgenv().Resolver = false
			text = Drawing.new("Text")
			text.Text = "Resolver has been turned off"
			text.Color = Color3.new(1, 1, 1) -- white text
			text.OutlineColor = Color3.new(0, 0, 0) -- black outline
			text.Center = true -- center text
			text.Outline = true
			text.Position = Vector2.new(100, 100)
			text.Size = 15 -- font size
			text.Font = Drawing.Fonts.Monospace -- 'UI', 'System', 'Plex', 'Monospace'
			text.Transparency = 0.9
			wait(5)
			text:Remove()
		end
	end
	end)
--[[
Panic =
	UIS.InputBegan:Connect(function(input)
		if (input.KeyCode == Enum.KeyCode.LeftAlt and UIS:IsKeyDown(Enum.KeyCode.Y)) or (input.KeyCode == Enum.KeyCode.Y and UIS:IsKeyDown(Enum.KeyCode.LeftAlt)) then
		spawn(function()
			game:GetService("CoreGui"):WaitForChild("DevConsoleMaster"):WaitForChild("DevConsoleWindow"):WaitForChild("DevConsoleUI"):WaitForChild("MainView"):WaitForChild("ClientLog"):ClearAllChildren()
		end)
		spawn(function()
			game:GetService("CoreGui"):WaitForChild("DevConsoleMaster"):WaitForChild("DevConsoleWindow"):WaitForChild("DevConsoleUI").ChildAdded:Connect(function(arg)
				if arg.Name == "MainView" then
					arg.Visible = false game:GetService("RunService").RenderStepped:Wait()
					arg:WaitForChild("ClientLog"):ClearAllChildren() game:GetService("RunService").RenderStepped:Wait()
					arg.Visible = true
				end
			end)
		end)
		if getgenv().CMMain then getgenv().CMMain:Disconnect(); getgenv().CMMain = nil end
		if getgenv().CMActi then getgenv().CMActi = nil end
		if DFGKODFG2 then DFGKODFG2:Disconnect(); DFGKODFG2 = nil end
		if EJGHNERJG then EJGHNERJG:Disconnect(); EJGHNERJG = nil end
		if Lock then Lock = false; Lock = nil end
		if Panic then Panic:Disconnect(); Panic = nil end
		if getgenv().EnabledLockd then getgenv().EnabledLockd = false; getgenv().EnabledLockd = nil end
		if spinCn and spinCn.Connected then spinCn:Disconnect(); spinCn = nil end
		if UniversalResolver and UniversalResolver.Connected then UniversalResolver:Disconnect(); UniversalResolver = nil end

		game:GetService("Players").LocalPlayer.Character.Humanoid:ChangeState("Jumping")
	end
	end)
]]

__index = hookmetamethod(game, "__index", function(t, k)
	if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and (getgenv().EnabledLockd and getgenv().EnabledLockd == true)) then
		if ((getgenv().EnabledLockd and getgenv().EnabledLockd == true) and (k == "Hit" or k == "Target")) then
			local Hit = getgenv().Final
			return (k == "Hit" and Hit or nil)
		end
	end
	return __index(t, k)
end)                                              
